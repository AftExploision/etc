(setq
 tetris-score-file    "~/.emacs.d/tetrisscores"
 c-default-style      "linux"
 c-basic-offset       4
 tab-width            4
 indent-tabs-mode     t
 debug-on-error       t
 delete-active-region t)

(if (not column-number-mode)
    (column-number-mode))
(setq show-paren-delay 0)
(set-face-attribute 'show-paren-match nil
                    :background "#999"
                    :foreground "#fff")

(if (not show-paren-mode)
    (show-paren-mode))

(setq whitespace-style '(face trailing tabs tab-mark))
(global-whitespace-mode 1)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset     'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

; Display the sze of the currently selected region. Updates when the last
; command was acursor move.
(defun region-stats ()
  (if (and (region-active-p)                 ; Check that a valid region is selected.
           (or
            (eq this-command 'previous-line) ; Check that the last command was a move.
            (eq this-command 'next-line)
            (eq this-command 'right-char)
            (eq this-command 'left-char)))
  (call-interactively
   'count-words-region)))               ; The gorramn command.

; Shift the selcted region (the selection, not the content) by n characters.
; Negative valus shift the region backwards
(defun region-shift (n)
  (when (region-active-p)               ; Check that a valid region is selected.
    (set-mark  (+ n (mark)))            ; Increment mark and point by n.
    (goto-char (+ n (point)))
    (setq deactivate-mark nil)))        ; Prevent mark killing herself.

; Shift the region selected by one character to the left.
(defun region-shift-left ()
  (interactive)
  (region-shift -1))

; Shift the region selected by one character to the right.
(defun region-shift-right ()
  (interactive)
  (region-shift  1))


(defun pos-line (position)
  (save-excursion
    (goto-char position)
    (beginning-of-line)
    (+ 1 (count-lines 1 (point)))))

; To be called from a hook - Inserts the calling command key(s) at the start
; of every line of the current selected region rectangle.
(defun region-apply (funct)
  (setq col        (current-column)       ; The column of the point is where we will insert.
        end-line
         (pos-line (region-end))
        start-line
         (pos-line (region-beginning))) ;


  (goto-line end-line)                  ; Go to the end line of the region

  (move-to-column col)
  (if (eq (current-column) col)
      (funcall funct))

  (while (> (pos-line (point))
            start-line)
    (next-line -1)
    (move-to-column col)
    (if (eq (current-column) col)
        (funcall funct)))

  (goto-line end-line)
  (move-to-column col)
  (push-mark)
  (transient-mark-mode t)

  (goto-line start-line)
  (move-to-column col)
  (setq deactivate-mark nil))

(defun region-insert ()
  (setq char
        (concat (this-command-keys)))
  (when (and (region-active-p)
             (eq 1 (length char))
             rectangle-mark-mode)
    (delete-char -1)
    (region-apply (lambda ()
                    (insert char)))
    (forward-char 1)))

(defun region-backspace ()
  (interactive)
  (when (and (region-active-p)
             rectangle-mark-mode)
    (setq orig-mode delete-active-region)
    (setq delete-active-region nil)
    (region-apply (lambda ()
                    (delete-backward-char 1)))
    (setq delete-active-region orig-mode)
    (backward-char 1)))

(add-hook 'rectangle-mark-mode-hook
          (lambda ()
            (when rectangle-mark-mode
              (add-hook
               'post-self-insert-hook
               'region-insert)
              (local-set-key (kbd "DEL") 'region-backspace))
            (when (not rectangle-mark-mode)
              (remove-hook
               'post-self-insert-hook
               'region-insert)
              (local-unset-key (kbd "DEL")))))

(add-hook 'activate-mark-hook
          (lambda ()
            (add-hook
             'post-command-hook
             'region-stats)))

(add-hook 'deactivate-mark-hook
          (lambda ()
            (remove-hook
             'post-command-hook
             'region-stats)))

(add-hook 'html-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)))

(add-hook 'lisp-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)))

(add-hook 'javascript-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)
            (setq tab-width 4)
            (setq js-indent-level 4)))

(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)
            (setq python-indent 4)
            (setq tab-width 4)))

(setq lola-map
      (copy-keymap
       (current-global-map)))

(define-key lola-map (kbd "C-c SPC")      nil)
(define-key lola-map (kbd "M-SPC")       'rectangle-mark-mode)
(define-key lola-map (kbd "C-c <left>")  'region-shift-left)
(define-key lola-map (kbd "C-c <right>") 'region-shift-right)

(use-global-map lola-map)

(global-set-key "\eOA" [up])
(global-set-key "\e[A" [up])
(global-set-key "\eOB" [down])
(global-set-key "\e[B" [down])
(global-set-key "\eOC" [right])
(global-set-key "\e[C" [right])
(global-set-key "\eOD" [left])
(global-set-key "\e[D" [left])
